/*@@
 * @file    CaKernel__gpu_cuda__3dstencil__Update_Pressure.h
 * @date    Tue Sep 20 15:47:56 CDT 2011
 * @author  Marek Blazewicz
 * @desc
 * The prototype of the CaCUDA computational schema. It contains macros
 * which enable to declare, define and launch kernels as well as to copy
 * the data required for proper computations. The macros presented
 * in this file in the future will be automatically generated by the
 * Cactus parser depending on the input in interfaces.ccl file.
 * @enddesc
 * @version  $Header$
 *
 @@*/

#ifndef CAKERNEL__GPU_CUDA__3DSTENCIL__UPDATE_PRESSURE_H
#define CAKERNEL__GPU_CUDA__3DSTENCIL__UPDATE_PRESSURE_H

#include <algorithm>

/* definition of CCTK_REAL */
#include "cctk.h"

/* CaCUDAUtil.h shall be visible to all CaCUDA developers at some point */
#include "CaCUDA/CaCUDALib/src/CaCUDAUtil.h"

#include "cctk_Parameters.h"
#include "cctk_Arguments.h"

#ifdef __CUDACC__

/// !!!!!!!!!!!!! BEGIN of global definitions (not auto generated) !!!!!!!!!!!!!!!!

#define CAKERNEL_Threadsx 16
#define CAKERNEL_Threadsy 16
#define CAKERNEL_Threadsz 1

/* JT: 16x16x16 failed to compile on spider. 8x8x8 is ok to compile.
 * Let's make 8x8x8 as the default setting temporarily.
 * We will need to estimate the best configuration based on
 * the number of variables and the memory available.
 * */
#define CAKERNEL_Tilex 16
#define CAKERNEL_Tiley 16
#define CAKERNEL_Tilez 16


/// !!!!!!!!!!!!! END of global definitions (not auto generated) !!!!!!!!!!!!!!!!

/// !!!!!!!!!!!!!!!!!!!!!!!!! BEGIN Update_Pressure Kernel macors !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifdef stncl_xn
#error "You can't include two header file in one execution file"
#endif

#define stncl_xn 1
#define stncl_xp 1
#define stncl_yn 1
#define stncl_yp 1
#define stncl_zn 1
#define stncl_zp 1
                 
/** Element  */
#define CAKERNEL_GFINDEX3D_Update_Pressure(ptr, i, j, k)                       \
 ptr[(i + gi) + params.cagh_ni * ((j + gj) + params.cagh_nj * (k + gk))]

// indexing function; havn't been tested yet
template<int i, int j, int k, typename t>
__device__ inline CCTK_REAL & cctk_cuda_gfindex3d_Update_Pressure_lhelper
         (t ptr_sh, const short & li, const short & lj, const short & lk
           ,CCTK_REAL & v_p1
           ,CCTK_REAL & v_n1
         )
{
    if(k == 0) return ptr_sh[j + lj][i + li];
    if(k == 1) return v_p1;
    if(k ==-1) return v_n1;
}

// Static derefernce of the variables 
#define CAKERNEL_GFINDEX3D_Update_Pressure_l(ptr, i, j, k)                     \
    cctk_cuda_gfindex3d_Update_Pressure_lhelper<i, j, k>(ptr##_sh, li, lj, lk  \
  , ptr##_p1                                                                   \
  , ptr##_n1                                                                   \
    )

// Dynamic derefernce of the variables (necessary to use this macro )
#  define CAKERNEL_GFINDEX3D_Update_Pressure_ld(ptr, i, j, k)                  \
    ((k == 0) ? ptr##_sh[j + lj][i + li] : (k > 0) ?                           \
    ptr##_v[k + lk - 1] : ptr##_v[k + lk])

#  define CAKERNEL_GFINDEX3D_Update_Pressure_l2(ptr, i, j, k)                  \
    ((k == 0) ? ptr##_sh[j + lj][i + li] : (k == 1) ?                          \
    ptr##_p1 : ptr##_n1)

#define I3D CAKERNEL_GFINDEX3D_Update_Pressure
#define I3D_l CAKERNEL_GFINDEX3D_Update_Pressure_l
#define I3D_ld CAKERNEL_GFINDEX3D_Update_Pressure_ld

#define CAKERNEL_Update_Pressure_Declare_Begin_s                               \
__global__ void CAKERNEL_Update_Pressure(                                      \
/** Variables automatically added by the Cactus parser:  */                    \
const CCTK_REAL *vx, CCTK_REAL *vx_out,const CCTK_REAL *vy, CCTK_REAL *vy_out,const CCTK_REAL *vz, CCTK_REAL *vz_out,\
CCTK_REAL *p,                                                                  \
                                                                               \
                                                                               \
/** Statically added variables to each kernel: */                              \
const CaCUDA_Kernel_Launch_Parameters params)                                  \
{                                                                           
# define CAKERNEL_Update_Pressure_Declare_Cached_Variables_s                   \
/** Kernel specific variables declaration. */                                  \
  __shared__ CCTK_REAL vx_sh[CAKERNEL_Tiley][CAKERNEL_Tilex];__shared__ CCTK_REAL vy_sh[CAKERNEL_Tiley][CAKERNEL_Tilex];__shared__ CCTK_REAL vz_sh[CAKERNEL_Tiley][CAKERNEL_Tilex];\
  CCTK_REAL vx_p1, vy_p1, vz_p1;                                               \
  CCTK_REAL vx_n1, vy_n1, vz_n1;                                               \
//CCTK_REAL vx_v[stncl_zn + stncl_zp];CCTK_REAL vy_v[stncl_zn + stncl_zp];CCTK_REAL vz_v[stncl_zn + stncl_zp];\
/** Common variables declaration; values are kernel specific. */            
# define CAKERNEL_Update_Pressure_Declare_Flow_Variables_s                     \
  short li = threadIdx.x;                                                      \
  short lj = threadIdx.y;                                                      \
  short lk = threadIdx.z + stncl_zn;                                           \
  int gi = blockIdx.x * (CAKERNEL_Tilex - stncl_xn - stncl_xp) + li;           \
  int gj = (blockIdx.y % params.cagh_blocky) *                                 \
          (CAKERNEL_Tiley - stncl_yn - stncl_yp) + lj;                         \
  int gk2= (blockIdx.y / params.cagh_blocky) *                                 \
          (CAKERNEL_Tilez - stncl_zn - stncl_zp) + lk;                         \
  int gk = gk2;                                                                \
  bool fetch_data = gi < params.cagh_ni && gj < params.cagh_nj;                \
  bool compute = gi < params.cagh_ni - 1 && gj < params.cagh_nj - 1 &&         \
    li >= stncl_xn && lj >= stncl_yn &&                                        \
    li < CAKERNEL_Tilex - stncl_xp &&                                          \
    lj < CAKERNEL_Tiley - stncl_yp;                                            \
  short tilez_to = min(CAKERNEL_Tilez - stncl_zp - stncl_zn,                   \
                        params.cagh_nk - gk - stncl_zp);                       \
  short tmpj;                                                                  \
    /** Dynamically set fetching from global memory */                      
# define CAKERNEL_Update_Pressure_Limit_Threads_To_LSH_Begin_s                 \
  if(fetch_data)                                                               \
  {                                                                         
#   define CAKERNEL_Update_Pressure_Fetch_Data_To_Cache_s                      \
                                                                               \
                                                                               \
    I3D_l(vx, 0, 0, -1 + 1) = I3D(vx, 0, 0, -1);                               \
    I3D_l(vy, 0, 0, -1 + 1) = I3D(vy, 0, 0, -1);                               \
    I3D_l(vz, 0, 0, -1 + 1) = I3D(vz, 0, 0, -1);                               \
                                                                               \
    I3D_l(vx, 0, 0, 0 + 1) = I3D(vx, 0, 0, 0);                                 \
    I3D_l(vy, 0, 0, 0 + 1) = I3D(vy, 0, 0, 0);                                 \
    I3D_l(vz, 0, 0, 0 + 1) = I3D(vz, 0, 0, 0);                                 \
                                                                               \
//    The loop is suppose to fetch the data from global to cached memory.      \
//    For cached variables only!                                               \
//    for (tmpi = -stncl_zn; tmpi < stncl_zp; tmpi++)                          \
//    {                                                                        \
//      I3D_l(vx, 0, 0, tmpi + 1) = I3D(vx, 0, 0, tmpi);                       \
//      I3D_l(vy, 0, 0, tmpi + 1) = I3D(vy, 0, 0, tmpi);                       \
//      I3D_l(vz, 0, 0, tmpi + 1) = I3D(vz, 0, 0, tmpi);                       \
//      I3D_l(p,  0, 0, tmpi + 1) = I3D(p,  0, 0, tmpi);                       \
//    }

#   define CAKERNEL_Update_Pressure_Computations_Begin_s                       \
    for(tmpj = 0; tmpj < tilez_to; tmpj++)                                     \
    {                                                                          \
      __syncthreads();                                                      
#     define CAKERNEL_Update_Pressure_Iterate_Local_Tile_s                     \
                                                                               \
                                                                               \
  I3D_l(vx, 0, 0, -1) = I3D_l(vx, 0, 0, -1 + 1);                               \
  I3D_l(vy, 0, 0, -1) = I3D_l(vy, 0, 0, -1 + 1);                               \
  I3D_l(vz, 0, 0, -1) = I3D_l(vz, 0, 0, -1 + 1);                               \
                                                                               \
  I3D_l(vx, 0, 0, 0) = I3D_l(vx, 0, 0, 0 + 1);                                 \
  I3D_l(vy, 0, 0, 0) = I3D_l(vy, 0, 0, 0 + 1);                                 \
  I3D_l(vz, 0, 0, 0) = I3D_l(vz, 0, 0, 0 + 1);                                 \
                                                                               \
      gk = gk2 + tmpj;                                                      
//    The loop is suppose to iterate local variables, as the tiles 'walks'     \
      through the z dimension. For cached variables only!                      \
      for (tmpi = -stncl_zn; tmpi < stncl_zp; tmpi++)                          \
      {                                                                        \
        I3D_l(vx, 0, 0, tmpi) = I3D_l(vx, 0, 0, tmpi + 1);                     \
        I3D_l(vy, 0, 0, tmpi) = I3D_l(vy, 0, 0, tmpi + 1);                     \
        I3D_l(vz, 0, 0, tmpi) = I3D_l(vz, 0, 0, tmpi + 1);                     \
      }                                                                   
#     define CAKERNEL_Update_Pressure_Fetch_Front_Tile_To_Cache_s              \
                                                                               \
        I3D_l(vx, 0, 0, stncl_zp) = I3D(vx, 0, 0, stncl_zp);                   \
        I3D_l(vy, 0, 0, stncl_zp) = I3D(vy, 0, 0, stncl_zp);                   \
        I3D_l(vz, 0, 0, stncl_zp) = I3D(vz, 0, 0, stncl_zp);                   \
                                                                               \
      __syncthreads();                                                      
//      I3D_l(vx, 0, 0, stncl_zp) = I3D(vx, 0, 0, stncl_zp);                   \
//      I3D_l(vy, 0, 0, stncl_zp) = I3D(vy, 0, 0, stncl_zp);                   \
//      I3D_l(vz, 0, 0, stncl_zp) = I3D(vz, 0, 0, stncl_zp);                
#     define CAKERNEL_Update_Pressure_Limit_Threads_To_Compute_Begin_s         \
      if(compute)                                                              \
      {                                                                        \
      /*if(threadIdx.x == 1 && threadIdx.y == 1)                               \
          printf("3cmpt [%02d, %02d, %02d]\n", gi, gj, gk);*/                  \
         /** TODO Add your computations here */                                \
         /** TODO Store the results to global array ({...}_out)  */

#     define CAKERNEL_Update_Pressure_Limit_Threads_To_Compute_End_s           \
      }                                                                     
#   define CAKERNEL_Update_Pressure_Computations_End_s                         \
    }
# define CAKERNEL_Update_Pressure_Limit_Threads_To_LSH_End_s                   \
  }                                                                         
#define CAKERNEL_Update_Pressure_Declare_End_s                                 \
}


#define CAKERNEL_Update_Pressure_Begin                                         \
CAKERNEL_Update_Pressure_Declare_Begin_s                                       \
  CAKERNEL_Update_Pressure_Declare_Cached_Variables_s                          \
  CAKERNEL_Update_Pressure_Declare_Flow_Variables_s                            \
  CAKERNEL_Update_Pressure_Limit_Threads_To_LSH_Begin_s                        \
    CAKERNEL_Update_Pressure_Fetch_Data_To_Cache_s                             
                                                                            
#   define CAKERNEL_Update_Pressure_Computations_Begin                         \
    CAKERNEL_Update_Pressure_Computations_Begin_s                              \
      CAKERNEL_Update_Pressure_Iterate_Local_Tile_s                            \
      CAKERNEL_Update_Pressure_Fetch_Front_Tile_To_Cache_s                     \
      CAKERNEL_Update_Pressure_Limit_Threads_To_Compute_Begin_s                
                                                                            
#   define CAKERNEL_Update_Pressure_Computations_End                           \
      CAKERNEL_Update_Pressure_Limit_Threads_To_Compute_End_s                  \
    CAKERNEL_Update_Pressure_Computations_End_s                                \
  CAKERNEL_Update_Pressure_Limit_Threads_To_LSH_End_s                   
                                                                     
#define CAKERNEL_Update_Pressure_End                                           \
CAKERNEL_Update_Pressure_Declare_End_s




///* Declaration of the global function */
//__global__ void CAKERNEL_Update_Pressure(                                      
///** Variables automatically added by the Cactus parser:  */                 
//const CCTK_REAL *vx,CCTK_REAL *vx_out,const CCTK_REAL *vy,CCTK_REAL *vy_out,const CCTK_REAL *vz,CCTK_REAL *vz_out,
//CCTK_REAL *p,
//
//
///** Statically added variables to each kernel: */                           
//const CaCUDA_Kernel_Launch_Parameters params);
//
//extern CCTK_REAL *d_vx,*d_vx_out;
extern CCTK_REAL *d_vy,*d_vy_out;
extern CCTK_REAL *d_vz,*d_vz_out;

//extern CCTK_REAL *d_p;

//
//


/// !!!!!!!!!!!!!!!!!!!!!!!!! END Update_Pressure Kernel macors !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#endif

#endif /* CAKERNEL__GPU_CUDA__3DSTENCIL__UPDATE_PRESSURE_H */
